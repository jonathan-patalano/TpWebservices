/*
 * Swagger Bank
 *
 * Mise en place d'une application bancaire simplifiée :
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.patalano@ynov.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserApiController : ControllerBase
    { 
        /// <summary>
        /// Dépôt et retrait d&#39;argent
        /// </summary>
        /// <remarks>Permet à un utilisateur d&#39;indiquer le montant qu&#39;il veut retirer ou déposer</remarks>
        /// <param name="accountNumber">Numéro du compte utilisateur.</param>
        /// <param name="date">Date effective du dépôt/retrait d&#39;argent.</param>
        /// <param name="amount">Montant de la transaction.</param>
        /// <param name="type">Type de la transaction Dépôt || Retrait.</param>
        /// <response code="200">La transaction à bien été effectuer</response>
        /// <response code="400">Transaction impossible</response>
        [HttpPost]
        [Route("/v2/user/cash")]
        [ValidateModelState]
        [SwaggerOperation("CashUser")]
        public virtual IActionResult CashUser([FromQuery][Required()]string accountNumber, [FromQuery][Required()]int? date, [FromQuery][Required()]int? amount, [FromQuery][Required()]string type)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Création d&#39;un utilisateur
        /// </summary>
        
        /// <param name="body">Création d&#39;un objet utilisateur</param>
        /// <response code="200">Un utilisateur à été ajouté, on renvoie un numero de compte ainsi qu&#39;un code pin qui lui serviront à se connecter plus tard.</response>
        /// <response code="400">Un des champs renseignés n&#39;est pas valide, attention à respecter le type/format des champs.</response>
        [HttpPost]
        [Route("/v2/user")]
        [ValidateModelState]
        [SwaggerOperation("CreateUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse200), description: "Un utilisateur à été ajouté, on renvoie un numero de compte ainsi qu&#39;un code pin qui lui serviront à se connecter plus tard.")]
        public virtual IActionResult CreateUser([FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse200));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "<null>\n  <AccountNumber>123</AccountNumber>\n  <CodePin>123</CodePin>\n</null>";
            exampleJson = "{\n  \"CodePin\" : 6,\n  \"AccountNumber\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<InlineResponse200>(exampleJson)
            : default(InlineResponse200);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Suppression d&#39;un utilisateur
        /// </summary>
        /// <remarks>Ceci ne peut être fait que par l&#39;utilisateur connecté.</remarks>
        /// <param name="id">Modification d&#39;un utilisateur par son Identifiant</param>
        /// <response code="200">Utilisateur supprimé</response>
        /// <response code="400">Identifiant invalide</response>
        /// <response code="404">Utilisateur introuvable</response>
        [HttpDelete]
        [Route("/v2/user/{Id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteUser")]
        public virtual IActionResult DeleteUser([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Récuperation d&#39;un utilisateur par son identifiant
        /// </summary>
        
        /// <param name="id">On cherche un utilisateur par son identifiant</param>
        /// <response code="200">Un utilisateur à été trouvé</response>
        /// <response code="400">Id invalide</response>
        /// <response code="404">Utilisateur introuvable</response>
        [HttpGet]
        [Route("/v2/user/{Id}")]
        [ValidateModelState]
        [SwaggerOperation("GetUserById")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Un utilisateur à été trouvé")]
        public virtual IActionResult GetUserById([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            string exampleJson = null;
            exampleJson = "<User>\n  <Id>123456789</Id>\n  <Civilite>aeiou</Civilite>\n  <Prenom>aeiou</Prenom>\n  <Nom>aeiou</Nom>\n  <DateNaissance>aeiou</DateNaissance>\n  <Adresse>aeiou</Adresse>\n</User>";
            exampleJson = "{\n  \"Prenom\" : \"Prenom\",\n  \"Adresse\" : \"Adresse\",\n  \"Civilite\" : \"Civilite\",\n  \"DateNaissance\" : \"DateNaissance\",\n  \"Id\" : 0,\n  \"Nom\" : \"Nom\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default(User);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Authentification d&#39;un utilisateur dans le système
        /// </summary>
        /// <remarks>Permet à un utilisateur de se connecter à son espace client.</remarks>
        /// <param name="accountNumber">Numéro du compte utilisateur.</param>
        /// <param name="codePin">Code pin qui servira de mot de passe.</param>
        /// <response code="200">L&#39;utilisateur est bien connecté, une session authentifié avec JWT est créé.</response>
        /// <response code="400">Combinaison Numéro de compte / CodePin erroné</response>
        [HttpGet]
        [Route("/v2/user/login")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("LoginUser")]
        public virtual IActionResult LoginUser([FromQuery][Required()]string accountNumber, [FromQuery][Required()]int? codePin)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Déconnexion de la session de l&#39;utilisateur en cours.
        /// </summary>
        
        /// <response code="200">L&#39;utilisateur est déconnecté, sa session est éffacer</response>
        /// <response code="400">Déconnexion impossible</response>
        [HttpGet]
        [Route("/v2/user/logout")]
        [ValidateModelState]
        [SwaggerOperation("LogoutUser")]
        public virtual IActionResult LogoutUser()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Virement d&#39;argent
        /// </summary>
        /// <remarks>Permet à un utilisateur de virer le montant qu&#39;il veut transferer sur </remarks>
        /// <param name="accountNumber">Numéro du compte utilisateur.</param>
        /// <param name="recipientAccountNumber">Numéro du compte de l&#39;utilisateur destinataire.</param>
        /// <param name="date">Date effective du dépôt/retrait d&#39;argent.</param>
        /// <param name="amount">Montant de la transaction.</param>
        /// <param name="type">Type de la transaction Dépôt || Retrait.</param>
        /// <response code="200">le virement est effectué et on retourne à l&#39;utilisateur un simple message de confirmation.</response>
        /// <response code="400">Transaction impossible</response>
        [HttpPost]
        [Route("/v2/user/transfer")]
        [ValidateModelState]
        [SwaggerOperation("TransferUser")]
        public virtual IActionResult TransferUser([FromQuery][Required()]string accountNumber, [FromQuery][Required()]decimal? recipientAccountNumber, [FromQuery][Required()]int? date, [FromQuery][Required()]int? amount, [FromQuery][Required()]decimal? type)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Modification d&#39;un utilisateur
        /// </summary>
        /// <remarks>Ceci ne peut être fait que par l&#39;utilisateur connecté.</remarks>
        /// <param name="id">Modification d&#39;un utilisateur par son Identifiant</param>
        /// <param name="body">Mise à jour de l&#39;objet utilisateur</param>
        /// <response code="200">L&#39;utilisateur à été mise à jour</response>
        /// <response code="400">Identifiant invalide</response>
        /// <response code="404">L&#39;utilisateur est introuvable</response>
        [HttpPut]
        [Route("/v2/user/{Id}")]
        [ValidateModelState]
        [SwaggerOperation("UpdateUser")]
        public virtual IActionResult UpdateUser([FromRoute][Required]string id, [FromBody]User body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);


            throw new NotImplementedException();
        }
    }
}
