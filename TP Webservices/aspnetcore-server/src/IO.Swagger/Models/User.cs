/*
 * Swagger Bank
 *
 * Mise en place d'une application bancaire simplifi√©e :
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jonathan.patalano@ynov.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class User : IEquatable<User>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Civilite
        /// </summary>
        [DataMember(Name="Civilite")]
        public string Civilite { get; set; }

        /// <summary>
        /// Gets or Sets Prenom
        /// </summary>
        [DataMember(Name="Prenom")]
        public string Prenom { get; set; }

        /// <summary>
        /// Gets or Sets Nom
        /// </summary>
        [DataMember(Name="Nom")]
        public string Nom { get; set; }

        /// <summary>
        /// Gets or Sets DateNaissance
        /// </summary>
        [DataMember(Name="DateNaissance")]
        public string DateNaissance { get; set; }

        /// <summary>
        /// Gets or Sets Adresse
        /// </summary>
        [DataMember(Name="Adresse")]
        public string Adresse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Civilite: ").Append(Civilite).Append("\n");
            sb.Append("  Prenom: ").Append(Prenom).Append("\n");
            sb.Append("  Nom: ").Append(Nom).Append("\n");
            sb.Append("  DateNaissance: ").Append(DateNaissance).Append("\n");
            sb.Append("  Adresse: ").Append(Adresse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((User)obj);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Civilite == other.Civilite ||
                    Civilite != null &&
                    Civilite.Equals(other.Civilite)
                ) && 
                (
                    Prenom == other.Prenom ||
                    Prenom != null &&
                    Prenom.Equals(other.Prenom)
                ) && 
                (
                    Nom == other.Nom ||
                    Nom != null &&
                    Nom.Equals(other.Nom)
                ) && 
                (
                    DateNaissance == other.DateNaissance ||
                    DateNaissance != null &&
                    DateNaissance.Equals(other.DateNaissance)
                ) && 
                (
                    Adresse == other.Adresse ||
                    Adresse != null &&
                    Adresse.Equals(other.Adresse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Civilite != null)
                    hashCode = hashCode * 59 + Civilite.GetHashCode();
                    if (Prenom != null)
                    hashCode = hashCode * 59 + Prenom.GetHashCode();
                    if (Nom != null)
                    hashCode = hashCode * 59 + Nom.GetHashCode();
                    if (DateNaissance != null)
                    hashCode = hashCode * 59 + DateNaissance.GetHashCode();
                    if (Adresse != null)
                    hashCode = hashCode * 59 + Adresse.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(User left, User right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(User left, User right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
